<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.S20230403.AccomMapper">
	<!-- 조건에 상관없이 모든 리스트를 다 가져오는 sql   -->
	<select id="cgGetProductByAccomtype" resultType="Accom" parameterType="java.lang.String">
		SELECT a.biz_id, a.biz_name, a.addr, r.min_price_r2 , room_resv_pay_re.avg_rating 
		FROM    accom a
		      ,
		        users u
		      , (
		            SELECT room1.biz_id_r1 biz_id_r2, 
		                   room1.min_price_r1 min_price_r2, 
		                   room2.bed_type bed_type_r2, 
		                   room2.r_id r_id_r2, 
		                   room2.wifi wifi, 
		                   room2.tv tv, 
		                   room2.ac ac, 
		                   room2.bath bath, 
		                   room2.r_capacity r_capacity 
		            FROM room room2,
		                    ( 
		                    SELECT r.biz_id biz_id_r1, min(r.r_price) min_price_r1
		                    FROM room r
		                    GROUP BY r.biz_id
		                    )room1
		            WHERE room1.biz_id_r1 = room2.biz_id
		        ) r
		      , (
		            SELECT r.biz_id  biz_id , nvl(round(avg(rating),0),0) avg_rating
		            FROM room r, reservation resv, payment p, review re
		            WHERE r.biz_id = resv.biz_id(+)
		            AND   r.r_id = resv.r_id(+)
		            AND   resv.biz_id = p.biz_id(+)
		            AND   resv.r_id = p.r_id(+)
		            AND   resv.user_id = p.user_id(+)
		            AND   resv.resv_id = p.resv_id(+)
		            AND   p.pay_id = re.pay_id(+)
		            GROUP BY r.biz_id
		        ) room_resv_pay_re
		WHERE u.user_id = a.user_id
		AND   u.user_status = 'activated'
		AND   a.biz_id =  r.biz_id_r2
		AND   a.accom_avail = 210
		<if test="accom_type != null and accom_type != ''">
	    AND   a.accom_type in
	    	<foreach item="accom_type" index="index" collection="accom_type.split(',')" open="(" separator="," close=")">
	    		#{accom_type}
	    	</foreach>
	    </if>
		AND   r.biz_id_r2 = room_resv_pay_re.biz_id
		GROUP BY a.biz_id, a.biz_name, a.addr,  r.min_price_r2 , room_resv_pay_re.avg_rating
		ORDER BY  avg_rating DESC
	</select>
	<!-- 주소에 따라서 해당 주소지에만 있는 업소를 보여주는 로직 -->
	<select id="cgGetProductListsByAddr" parameterType="Accom" resultType="Accom">
			SELECT a.biz_id, a.biz_name, a.addr, r.min_price_r2 , room_resv_pay_re.avg_rating 
			FROM    accom a
		      ,
		        users u
		      , (
		            SELECT room1.biz_id_r1 biz_id_r2, 
		                   room1.min_price_r1 min_price_r2, 
		                   room2.bed_type bed_type_r2, 
		                   room2.r_id r_id_r2, 
		                   room2.wifi wifi, 
		                   room2.tv tv, 
		                   room2.ac ac, 
		                   room2.bath bath, 
		                   room2.r_capacity r_capacity 
		            FROM room room2,
		                    ( 
		                    SELECT r.biz_id biz_id_r1, min(r.r_price) min_price_r1
		                    FROM room r
		                    GROUP BY r.biz_id
		                    )room1
		            WHERE room1.biz_id_r1 = room2.biz_id
		        ) r
		      , (
		            SELECT r.biz_id  biz_id , nvl(round(avg(rating),0),0) avg_rating
		            FROM room r, reservation resv, payment p, review re
		            WHERE r.biz_id = resv.biz_id(+)
		            AND   r.r_id = resv.r_id(+)
		            AND   resv.biz_id = p.biz_id(+)
		            AND   resv.r_id = p.r_id(+)
		            AND   resv.user_id = p.user_id(+)
		            AND   resv.resv_id = p.resv_id(+)
		            AND   p.pay_id = re.pay_id(+)
		            GROUP BY r.biz_id
		        ) room_resv_pay_re
		WHERE u.user_id = a.user_id
		AND   u.user_status = 'activated'
		AND   a.biz_id =  r.biz_id_r2
		AND   a.accom_avail = 210
		<if test="accom_type != null and accom_type != ''">
	    AND   a.accom_type in
	    	<foreach item="accom_type" index="index" collection="accom_type.split(',')" open="(" separator="," close=")">
	    		#{accom_type}
	    	</foreach>
	    </if>
		AND	  a.addr		like  '%' || #{addr} || '%'	
		AND   r.biz_id_r2 = room_resv_pay_re.biz_id
		GROUP BY a.biz_id, a.biz_name, a.addr,  r.min_price_r2 , room_resv_pay_re.avg_rating
		ORDER BY  avg_rating DESC
	</select>
	
	
	<!-- 리뷰용 판매자가 가지고 있는 업장 불러오기  -->
	
	 <select id="getMyAccoms" parameterType="java.lang.String" resultType="Accom">
		SELECT a.biz_id, a.biz_name, a.addr, r.min_price_r2 , room_resv_pay_re.avg_rating
		FROM    accom a
		      ,
		        users u
		      , (
		            SELECT room1.biz_id_r1 biz_id_r2, 
		                   room1.min_price_r1 min_price_r2, 
		                   room2.r_id r_id_r2
		            FROM room room2,
		                    ( 
		                    SELECT r.biz_id biz_id_r1, min(r.r_price) min_price_r1
		                    FROM room r
		                    GROUP BY r.biz_id
		                    )room1
		            WHERE room1.biz_id_r1 = room2.biz_id
		        ) r
		      , (
		            SELECT r.biz_id  biz_id , nvl(round(avg(rating),0),0) avg_rating
		            FROM room r, reservation resv, payment p, review re
		            WHERE r.biz_id = resv.biz_id(+)
		            AND   r.r_id = resv.r_id(+)
		            AND   resv.biz_id = p.biz_id(+)
		            AND   resv.r_id = p.r_id(+)
		            AND   resv.user_id = p.user_id(+)
		            AND   resv.resv_id = p.resv_id(+)
		            AND   p.pay_id = re.pay_id(+)
		            GROUP BY r.biz_id
		        ) room_resv_pay_re
		WHERE u.user_id = a.user_id
		AND   u.user_status = 'activated'
		AND   a.biz_id =  r.biz_id_r2
		AND   a.accom_avail = 210
		AND   r.biz_id_r2 = room_resv_pay_re.biz_id
		and   a.user_id = #{sellerUser_id}
		GROUP BY a.biz_id, a.biz_name, a.addr,  r.min_price_r2 , room_resv_pay_re.avg_rating
		ORDER BY  a.biz_name
	</select> 
	
	<select id="getMyInfo" parameterType="java.lang.String" resultType="Accom">
		SELECT 	a.biz_id, a.biz_name, r.r_name,r.r_id
		FROM	accom a, room r
		WHERE 	a.biz_id = r.biz_id
		AND 	a.biz_id = #{biz_id}
	</select> 
	
	<!-- user_id로 찜 목록 가져오는 로직   -->
	<select id="getMyAccomZzimListsByUser_id" parameterType="java.lang.String" resultType="Accom">
		SELECT a.biz_id, a.biz_name, a.addr, r.min_price_r2 , room_resv_pay_re.avg_rating,z.zzim_date,z.zzim_status
		FROM    accom a
		      ,
		        zzim  z
		      ,
		        (
		            SELECT room1.biz_id_r1 biz_id_r2, 
		                   room1.min_price_r1 min_price_r2, 
		                   room2.bed_type bed_type_r2, 
		                   room2.r_id r_id_r2, 
		                   room2.wifi wifi, 
		                   room2.tv tv, 
		                   room2.ac ac, 
		                   room2.bath bath, 
		                   room2.r_capacity r_capacity 
		            FROM room room2,
		                    ( 
		                    SELECT r.biz_id biz_id_r1, min(r.r_price) min_price_r1
		                    FROM room r
		                    GROUP BY r.biz_id
		                    )room1
		            WHERE room1.biz_id_r1 = room2.biz_id
		        ) r
		      , (
		            SELECT r.biz_id  biz_id , nvl(round(avg(rating),0),0) avg_rating
		            FROM room r, reservation resv, payment p, review re
		            WHERE r.biz_id = resv.biz_id(+)
		            AND   r.r_id = resv.r_id(+)
		            AND   resv.biz_id = p.biz_id(+)
		            AND   resv.r_id = p.r_id(+)
		            AND   resv.resv_id = p.resv_id(+)
		            AND   resv.user_id = p.user_id(+)
		            AND   p.pay_id = re.pay_id(+)
		            GROUP BY r.biz_id
		        ) room_resv_pay_re
		where   a.biz_id =  r.biz_id_r2
		AND   a.biz_id = z.biz_id
		AND   a.accom_avail = 210
		and   z.user_id = #{user_id}
		AND   r.biz_id_r2 = room_resv_pay_re.biz_id
		GROUP BY a.biz_id, a.biz_name, a.addr,  r.min_price_r2 , room_resv_pay_re.avg_rating,z.zzim_date,z.zzim_status
		ORDER BY  z.zzim_date DESC
	</select>

</mapper>